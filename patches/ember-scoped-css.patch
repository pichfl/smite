diff --git a/dist/cjs/index.cjs b/dist/cjs/index.cjs
index 403de12df5bf1aab1a5f6dc59151e38437c5f54e..baa5a987d97e5c09421e121216b0e12b3b78ea60 100644
--- a/dist/cjs/index.cjs
+++ b/dist/cjs/index.cjs
@@ -45,6 +45,7 @@ var import_path = __toESM(require("path"), 1);
 var import_node_assert = __toESM(require("node:assert"), 1);
 var import_node_fs = __toESM(require("node:fs"), 1);
 var import_node_path = __toESM(require("node:path"), 1);
+var import_package_up = require("package-up");
 
 // src/lib/path/hash-from-module-path.js
 var import_blueimp_md5 = __toESM(require("blueimp-md5"), 1);
@@ -67,7 +68,6 @@ var EMBROIDER_3_REWRITTEN_APP_ASSETS = `${EMBROIDER_3_REWRITTEN_APP_PATH}/assets
 var EMBROIDER_3_REWRITTEN_PACKAGES = `${EMBROIDER_DIR}/rewritten-packages`;
 var IRRELEVANT_PATHS = ["node_modules/.pnpm"];
 var UNSUPPORTED_DIRECTORIES = /* @__PURE__ */ new Set(["tests"]);
-var CWD = process.cwd();
 function cssPathFor(fileName) {
   let withoutExt = withoutExtension(fileName);
   let cssPath = withoutExt + ".css";
@@ -162,8 +162,7 @@ function getSeen(sourcePath) {
     }
   }
 }
-function findWorkspacePath(sourcePath, options) {
-  let cwd = options?.cwd ?? CWD;
+function findWorkspacePath(sourcePath) {
   if (sourcePath.includes(EMBROIDER_3_REWRITTEN_APP_PATH)) {
     sourcePath = sourcePath.split(EMBROIDER_3_REWRITTEN_APP_PATH)[0];
   }
@@ -179,7 +178,7 @@ function findWorkspacePath(sourcePath, options) {
   if (isWorkspace) {
     return sourcePath;
   }
-  const packageJsonPath = findPackageJsonUp(sourcePath, { cwd });
+  const packageJsonPath = (0, import_package_up.packageUpSync)({ cwd: sourcePath });
   if (!packageJsonPath) {
     throw new Error(`Could not determine project for ${sourcePath}`);
   }
@@ -187,22 +186,6 @@ function findWorkspacePath(sourcePath, options) {
   SEEN.add(workspacePath);
   return workspacePath;
 }
-function findPackageJsonUp(startPath, options) {
-  let cwd = options?.cwd ?? CWD;
-  let parts = startPath.split("/");
-  for (let i = parts.length - 1; i > 1; i--) {
-    let toCheck = parts.slice(0, i).join("/");
-    let packageJson = import_node_path.default.join(toCheck, "package.json");
-    let exists = import_node_fs.default.existsSync(packageJson);
-    if (exists) {
-      return packageJson;
-    }
-    if (toCheck === cwd) {
-      break;
-    }
-  }
-  return null;
-}
 var MANIFEST_CACHE = /* @__PURE__ */ new Map();
 function moduleName(sourcePath) {
   const workspace = findWorkspacePath(sourcePath);
@@ -818,4 +801,4 @@ function createPlugin(config) {
   scopedCssUnplugin,
   templatePlugin
 });
-//# sourceMappingURL=data:application/json;base64,
+//# sourceMappingURL=data:application/json;base64,
diff --git a/package.json b/package.json
index 7632122072cc5153005a8ee01f02adf880a2af9c..bfa83cede22587318935d74a550a45a9f29c3168 100644
--- a/package.json
+++ b/package.json
@@ -69,6 +69,7 @@
     "@babel/parser": "^7.26.9",
     "@embroider/addon-shim": "^1.9.0",
     "acorn": "^8.14.1",
+    "package-up": "5.0.0",
     "babel-import-util": "^3.0.1",
     "blueimp-md5": "^2.19.0",
     "broccoli-concat": "^4.2.5",
diff --git a/src/lib/replaceHbsInJs.js b/src/lib/replaceHbsInJs.js
index c9fd2cf32e179ad1cd99205701cc1adc575d4aa0..9fe53fa7126b578acf5c9a8ba0004aa6296b7053 100644
--- a/src/lib/replaceHbsInJs.js
+++ b/src/lib/replaceHbsInJs.js
@@ -8,6 +8,9 @@ const parseOptions = {
         sourceType: 'module',
         allowImportExportEverywhere: true,
         tokens: true,
+        plugins: [
+          "decorators",
+        ],
       });
     },
   },
