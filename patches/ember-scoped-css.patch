diff --git a/dist/cjs/index.cjs b/dist/cjs/index.cjs
index 403de12df5bf1aab1a5f6dc59151e38437c5f54e..32c5b5e88bf348c56e05ff07f9e47509d3f88abb 100644
--- a/dist/cjs/index.cjs
+++ b/dist/cjs/index.cjs
@@ -726,15 +726,6 @@ var import_node_path3 = __toESM(require("node:path"), 1);
 function fixFilename(filename) {
   let fileName = filename;
   let workspace = findWorkspacePath(fileName);
-  let moduleName2 = moduleName(workspace);
-  let wrongModuleName = import_node_path3.default.basename(workspace);
-  let deduped = fileName.replace(
-    `${wrongModuleName}/${moduleName2}/`,
-    `${wrongModuleName}/app/`
-  );
-  if (deduped !== fileName) {
-    return deduped;
-  }
   let hasAppDir = fileName.includes(import_node_path3.default.join(workspace, "app"));
   let hasSrcDir = fileName.includes(import_node_path3.default.join(workspace, "src"));
   if (!(hasAppDir || hasSrcDir) && !fileName.includes("/node_modules/.embroider/")) {
@@ -818,4 +809,4 @@ function createPlugin(config) {
   scopedCssUnplugin,
   templatePlugin
 });
-//# sourceMappingURL=data:application/json;base64,
+//# sourceMappingURL=data:application/json;base64,
diff --git a/package.json b/package.json
index 7632122072cc5153005a8ee01f02adf880a2af9c..bfa83cede22587318935d74a550a45a9f29c3168 100644
--- a/package.json
+++ b/package.json
@@ -69,6 +69,7 @@
     "@babel/parser": "^7.26.9",
     "@embroider/addon-shim": "^1.9.0",
     "acorn": "^8.14.1",
+    "package-up": "5.0.0",
     "babel-import-util": "^3.0.1",
     "blueimp-md5": "^2.19.0",
     "broccoli-concat": "^4.2.5",
diff --git a/src/lib/replaceHbsInJs.js b/src/lib/replaceHbsInJs.js
index c9fd2cf32e179ad1cd99205701cc1adc575d4aa0..9fe53fa7126b578acf5c9a8ba0004aa6296b7053 100644
--- a/src/lib/replaceHbsInJs.js
+++ b/src/lib/replaceHbsInJs.js
@@ -8,6 +8,9 @@ const parseOptions = {
         sourceType: 'module',
         allowImportExportEverywhere: true,
         tokens: true,
+        plugins: [
+          "decorators",
+        ],
       });
     },
   },
